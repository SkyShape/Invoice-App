[{"C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\index.js":"1","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\App.js":"2","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\Sidebar.js":"3","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Home.js":"4","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Invoice.js":"5","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Error.js":"6","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\context.js":"7","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\Delete.js":"8","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\HomeTop.js":"9","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\InvoiceButtons.js":"10","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\FormButtons.js":"11","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\Item.js":"12","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\Form.js":"13"},{"size":277,"mtime":1614884077659,"results":"14","hashOfConfig":"15"},{"size":560,"mtime":1617233451114,"results":"16","hashOfConfig":"15"},{"size":475,"mtime":1617235253559,"results":"17","hashOfConfig":"15"},{"size":2969,"mtime":1617235652000,"results":"18","hashOfConfig":"15"},{"size":5692,"mtime":1617235665717,"results":"19","hashOfConfig":"15"},{"size":407,"mtime":1615303507214,"results":"20","hashOfConfig":"15"},{"size":4450,"mtime":1617234726425,"results":"21","hashOfConfig":"15"},{"size":1637,"mtime":1617133217380,"results":"22","hashOfConfig":"15"},{"size":2821,"mtime":1616023203071,"results":"23","hashOfConfig":"15"},{"size":1159,"mtime":1617149628932,"results":"24","hashOfConfig":"15"},{"size":2342,"mtime":1617235230926,"results":"25","hashOfConfig":"15"},{"size":2928,"mtime":1617235695067,"results":"26","hashOfConfig":"15"},{"size":8367,"mtime":1617235577631,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1t6sgpj",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},"C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\index.js",[],"C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\App.js",[],"C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\Sidebar.js",[],"C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Home.js",["62","63"],"import React, { useEffect } from \"react\";\r\nimport { useGlobalContext } from \"./context\";\r\nimport { Link } from \"react-router-dom\";\r\nimport \"./styles/Home.css\";\r\nimport arrowRight from \"./assets/icon-arrow-right.svg\";\r\nimport HomeTop from \"./Components/HomeTop\";\r\nimport Form from \"./Components/Form\";\r\n\r\nfunction Home() {\r\n  const {\r\n    data,\r\n    setChosenId,\r\n    statuses,\r\n    setInfo,\r\n    infoFormat,\r\n    setConfDelete,\r\n    showForm,\r\n    setShowForm,\r\n  } = useGlobalContext();\r\n\r\n  useEffect(() => {\r\n    setInfo({ ...infoFormat });\r\n    setShowForm(false);\r\n    setConfDelete(false);\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      <div className={showForm ? \"darken-bg\" : \"\"}>\r\n        <div className=\"info__component flex-vertical\">\r\n          <HomeTop />\r\n          <Form />\r\n          {data.map((el) => {\r\n            const { id, paymentDue, clientName, total, status } = el;\r\n            if (\r\n              statuses[status] === true ||\r\n              (statuses.draft === statuses.paid &&\r\n                statuses.paid === statuses.pending &&\r\n                statuses.draft === statuses.pending)\r\n            ) {\r\n              return (\r\n                <Link\r\n                  onClick={() => {\r\n                    setChosenId(id);\r\n                  }}\r\n                  to={`/invoice/${id}`}\r\n                  style={{ textDecoration: \"none\" }}\r\n                  className=\"flex-horizontal width list\"\r\n                  key={id}\r\n                >\r\n                  <ul className=\"info__component--section1\">\r\n                    <li>\r\n                      <h3>\r\n                        <span className=\"hashtag\">#</span>\r\n                        {id || \"-\"}\r\n                      </h3>\r\n                    </li>\r\n                    <li>\r\n                      Due{\" \"}\r\n                      {new Date(paymentDue).toDateString() === \"Invalid Date\"\r\n                        ? \"-\"\r\n                        : new Date(paymentDue).toDateString().slice(4)}\r\n                    </li>\r\n                    <li>{clientName || \"-\"}</li>\r\n                  </ul>\r\n                  <ul className=\"info__component--section2\">\r\n                    <li>\r\n                      <h2>${total || \"0.00\"}</h2>\r\n                    </li>\r\n                    <li\r\n                      className={`${\r\n                        status === \"paid\"\r\n                          ? \"paid status\"\r\n                          : status === \"pending\"\r\n                          ? \"pending status\"\r\n                          : status === \"draft\"\r\n                          ? \"draft status\"\r\n                          : \"status\"\r\n                      }`}\r\n                    >\r\n                      <h3>{status || \"-\"}</h3>\r\n                    </li>\r\n                    <img src={arrowRight} alt=\"\" />\r\n                  </ul>\r\n                </Link>\r\n              );\r\n            }\r\n          })}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Invoice.js",["64","65","66"],"import React, { useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"./context\";\r\nimport \"./styles/Invoice.css\";\r\nimport iconLeft from \"./assets/icon-arrow-left.svg\";\r\nimport Delete from \"./Components/Delete\";\r\nimport InvoiceButtons from \"./Components/InvoiceButtons\";\r\nimport Form from \"./Components/Form\";\r\n\r\nfunction Invoice() {\r\n  const {\r\n    data,\r\n    chosenId,\r\n    info,\r\n    setInfo,\r\n    setIdx,\r\n    confDelete,\r\n    showForm,\r\n  } = useGlobalContext();\r\n\r\n  useEffect(() => {\r\n    window.scrollTo(0, 0);\r\n    data.forEach((el, i) => {\r\n      if (el.id === chosenId) {\r\n        setInfo({ ...el });\r\n        setIdx(i);\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  const {\r\n    id,\r\n    createdOn,\r\n    paymentDue,\r\n    description,\r\n    clientName,\r\n    clientEmail,\r\n    status,\r\n    senderAddress,\r\n    clientAddress,\r\n    items,\r\n    total,\r\n  } = info;\r\n\r\n  return (\r\n    <>\r\n      <Form />\r\n      <Delete />\r\n      <div className={showForm || confDelete ? \"darken-bg\" : \"\"}>\r\n        <div className=\"invoice\">\r\n          <Link to=\"/\" className=\"back\">\r\n            <img src={iconLeft} alt=\"\" />\r\n            <h3>Go back</h3>\r\n          </Link>\r\n          <div className=\"top__component box\">\r\n            <div className=\"flex-horizontal\">\r\n              <p>Status</p>\r\n              <div\r\n                style={{ [\"marginRight\"]: \"none\" }}\r\n                className={`${\r\n                  status === \"paid\"\r\n                    ? \"paid status\"\r\n                    : status === \"pending\"\r\n                    ? \"pending status\"\r\n                    : status === \"draft\"\r\n                    ? \"draft status\"\r\n                    : \"status\"\r\n                }`}\r\n              >\r\n                <h3>{status || \"-\"}</h3>\r\n              </div>\r\n            </div>\r\n            <div className=\"flex-horizontal top__component__btns\">\r\n              <InvoiceButtons />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"bottom__buttons\">\r\n            <InvoiceButtons />\r\n          </div>\r\n\r\n          <div className=\"bottom__component box\">\r\n            <section className=\"top\">\r\n              <div className=\"id-description\">\r\n                <h2>\r\n                  <span className=\"hashtag\">#</span>\r\n                  {id || \"-\"}\r\n                </h2>\r\n                <p>{description || \"-\"}</p>\r\n              </div>\r\n\r\n              <div className=\"sender--address\">\r\n                <p>{senderAddress.street || \"-\"}</p>\r\n                <p>{senderAddress.city || \"-\"}</p>\r\n                <p>{senderAddress.postCode || \"-\"}</p>\r\n                <p>{senderAddress.country || \"-\"}</p>\r\n              </div>\r\n            </section>\r\n\r\n            <section className=\"bottom\">\r\n              <div className=\"dates\">\r\n                <div>\r\n                  <p className=\"description\">Invoice Date</p>\r\n                  <h2>\r\n                    {new Date(createdOn).toDateString() === \"Invalid Date\"\r\n                      ? \"-\"\r\n                      : new Date(createdOn).toDateString().slice(4)}\r\n                  </h2>\r\n                </div>\r\n                <div>\r\n                  <p className=\"description\">Payment Due</p>\r\n                  <h2>\r\n                    {new Date(paymentDue).toDateString() === \"Invalid Date\"\r\n                      ? \"-\"\r\n                      : new Date(paymentDue).toDateString().slice(4)}\r\n                  </h2>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"client--address\">\r\n                <p className=\"description\">Bill To</p>\r\n                <h2 className=\"description\">{clientName || \"-\"}</h2>\r\n                <p>{clientAddress.street || \"-\"}</p>\r\n                <p>{clientAddress.city || \"-\"}</p>\r\n                <p>{clientAddress.postCode || \"-\"}</p>\r\n                <p>{clientAddress.country || \"-\"}</p>\r\n              </div>\r\n              <div className=\"sender\">\r\n                <p className=\"description\">Sent To</p>\r\n                <h2>{clientEmail || \"-\"}</h2>\r\n              </div>\r\n            </section>\r\n            <section>\r\n              <section className=\"calculations\">\r\n                {items.map((el, i) => {\r\n                  if (\r\n                    el.total === undefined ||\r\n                    NaN ||\r\n                    el.quantity === 0 ||\r\n                    \"\" ||\r\n                    undefined ||\r\n                    el.price === 0 ||\r\n                    \"\"\r\n                  ) {\r\n                    return items.length > 1 ? (\r\n                      <p key={i} className=\"description\">\r\n                        Not Enough Info\r\n                      </p>\r\n                    ) : (\r\n                      <p key={i} className=\"description\">\r\n                        No Items To Display\r\n                      </p>\r\n                    );\r\n                  } else {\r\n                    return (\r\n                      <div key={i} className=\"calculations--top\">\r\n                        <div className=\"calculations--top__amount\">\r\n                          <h3>{el.name}</h3>\r\n                          <p>{`\\$${el.price} x ${el.quantity}`}</p>\r\n                        </div>\r\n                        <div>\r\n                          <h3>${el.total}</h3>\r\n                        </div>\r\n                      </div>\r\n                    );\r\n                  }\r\n                })}\r\n              </section>\r\n              <div className=\"calculations--bottom\">\r\n                <p>Total</p>\r\n                <h2>${total || \"0.00\"}</h2>\r\n              </div>\r\n            </section>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Invoice;\r\n","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Error.js",[],"C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\context.js",["67","68"],"import React, { useState, useContext, useLayoutEffect, useEffect } from \"react\";\r\nimport inv from \"./data.json\";\r\n\r\nconst AppContext = React.createContext();\r\n\r\nconst AppProvider = ({ children }) => {\r\n  const infoFormat = {\r\n    clientAddress: {\r\n      street: \"\",\r\n      city: \"\",\r\n      postCode: \"\",\r\n      country: \"\",\r\n    },\r\n    clientEmail: \"\",\r\n    clientName: \"\",\r\n    createdOn: \"\",\r\n    description: \"\",\r\n    id: \"\",\r\n    items: [{ total: \"\" }],\r\n    paymentDue: \"\",\r\n    paymentTerms: \"1\",\r\n    senderAddress: {\r\n      street: \"\",\r\n      city: \"\",\r\n      postCode: \"\",\r\n      country: \"\",\r\n    },\r\n    status: \"\",\r\n    total: \"\",\r\n  };\r\n\r\n  const [data, setData] = useState([...inv]);\r\n  const [info, setInfo] = useState({ ...infoFormat });\r\n  const [chosenId, setChosenId] = useState([]);\r\n  const [idx, setIdx] = useState(0);\r\n\r\n  const [statuses, setStatuses] = useState({\r\n    draft: false,\r\n    pending: false,\r\n    paid: false,\r\n  });\r\n  const [confDelete, setConfDelete] = useState(false);\r\n  const [showForm, setShowForm] = useState(false);\r\n  const [edit, setEdit] = useState(false);\r\n\r\n  function useWindowSize() {\r\n    const [size, setSize] = useState([0, 0]);\r\n    useLayoutEffect(() => {\r\n      function updateSize() {\r\n        setSize([window.innerWidth, window.innerHeight]);\r\n      }\r\n      window.addEventListener(\"resize\", updateSize);\r\n      updateSize();\r\n      return () => window.removeEventListener(\"resize\", updateSize);\r\n    }, []);\r\n    return size;\r\n  }\r\n\r\n  useEffect(() => {\r\n    const json = localStorage.getItem(\"testObj\");\r\n    if (json) {\r\n      setData(JSON.parse(json));\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(\"testObj\", JSON.stringify(data));\r\n    if (data.length === 0) {\r\n      setData([...inv]);\r\n    }\r\n  });\r\n\r\n  const handleCancel = () => {\r\n    setEdit(false);\r\n    setShowForm(false);\r\n  };\r\n\r\n  const onSubmit = (dat) => {\r\n    let total = 0;\r\n    dat.items.map((el) => {\r\n      el.total = el.quantity * el.price;\r\n      total += parseInt(el.total);\r\n    });\r\n    if (edit) {\r\n      const final = {\r\n        ...info,\r\n        ...dat,\r\n        status: \"pending\",\r\n        total,\r\n      };\r\n\r\n      setInfo({\r\n        ...info,\r\n        ...final,\r\n      });\r\n      data.splice(idx, 1, final);\r\n      setData([...data]);\r\n      handleCancel();\r\n      console.log(data[idx]);\r\n    } else {\r\n      setData([\r\n        ...data,\r\n        { ...info, ...dat, id: idGen(), status: \"pending\", total },\r\n      ]);\r\n      handleCancel();\r\n    }\r\n  };\r\n\r\n  const idGen = function () {\r\n    return Math.random().toString(36).substr(2, 6).toUpperCase();\r\n  };\r\n\r\n  // const handleSubmit = (e) => {\r\n  //   e.preventDefault();\r\n  //   // if (!filled) {\r\n  //   //   console.log(\"sddsa\");\r\n  //   // }\r\n  //   setInfo({ ...changedInfo });\r\n\r\n  //   if (!edit) {\r\n  //     data.push({ ...changedInfo, id: idGen() });\r\n  //     setChangedInfo({ ...infoFormat });\r\n  //     console.log(data);\r\n  //   } else {\r\n  //     data.splice(idx, 1, changedInfo);\r\n  //   }\r\n  // };\r\n\r\n  // const handleChange = (e) => {\r\n  //   const { name, value, id } = e.target;\r\n\r\n  //   //  if (!value.trim()) {\r\n  //   //    setFilled(false);\r\n  //   //    e.target.classList.add(\"empty\");\r\n  //   //  } else {\r\n  //   //    setFilled(true);\r\n  //   //  }\r\n\r\n  //   if (id) {\r\n  //     if (id === changedInfo.items) {\r\n  //       setChangedInfo({\r\n  //         ...changedInfo,\r\n  //         items: [...changedInfo.items, { [name]: value }],\r\n  //       });\r\n  //     } else {\r\n  //       setChangedInfo({\r\n  //         ...changedInfo,\r\n  //         [id]: { ...changedInfo[id], [name]: value },\r\n  //       });\r\n  //     }\r\n  //   } else {\r\n  //     setChangedInfo({ ...changedInfo, [name]: value });\r\n  //   }\r\n\r\n  //   //  console.log(filled);\r\n  // };\r\n\r\n  return (\r\n    <AppContext.Provider\r\n      value={{\r\n        data,\r\n        setData,\r\n        useWindowSize,\r\n        setChosenId,\r\n        chosenId,\r\n        info,\r\n        setInfo,\r\n        statuses,\r\n        setStatuses,\r\n        infoFormat,\r\n        idx,\r\n        setIdx,\r\n        confDelete,\r\n        setConfDelete,\r\n        showForm,\r\n        setShowForm,\r\n        edit,\r\n        setEdit,\r\n        handleCancel,\r\n        onSubmit,\r\n        idGen,\r\n      }}\r\n    >\r\n      {children}\r\n    </AppContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useGlobalContext = () => {\r\n  return useContext(AppContext);\r\n};\r\n\r\nexport { AppContext, AppProvider };\r\n","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\Delete.js",["69"],"import React from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport \"../styles/Delete.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useGlobalContext } from \"../context\";\r\n\r\nexport default function Delete() {\r\n  const {\r\n    data,\r\n    setData,\r\n    idx,\r\n    info,\r\n    confDelete,\r\n    setConfDelete,\r\n  } = useGlobalContext();\r\n\r\n  if (!confDelete) {\r\n    return null;\r\n  }\r\n  return ReactDom.createPortal(\r\n    <>\r\n      <div\r\n        className=\"darken-bg\"\r\n        style={{ zIndex: \"100\" }}\r\n        onClick={(e) => {\r\n          setConfDelete(false);\r\n        }}\r\n      >\r\n        <div\r\n          className=\"delete__component\"\r\n          onClick={(e) => {\r\n            // prevent event bubbling\r\n            e.stopPropagation();\r\n          }}\r\n        >\r\n          <h2>Confirm Deletion</h2>\r\n          <p>\r\n            {`Are you sure you want to delete invoice #${info.id}? This action cannot be\r\n        undone.`}\r\n          </p>\r\n          <div className=\"delete__component__btns\">\r\n            <button\r\n              className=\"edit btn\"\r\n              onClick={() => {\r\n                setConfDelete(false);\r\n              }}\r\n            >\r\n              <h3>Cancel</h3>\r\n            </button>\r\n            <Link to=\"/\">\r\n              <button\r\n                className=\"delete btn\"\r\n                onClick={() => {\r\n                  setData((data) => data.filter((el, i) => i !== idx));\r\n                }}\r\n              >\r\n                <h3>Delete</h3>\r\n              </button>\r\n            </Link>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>,\r\n    document.getElementById(\"portal\")\r\n  );\r\n}\r\n","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\HomeTop.js",["70"],"import React, { useState } from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport iconPlus from \"../assets/icon-plus.svg\";\r\nimport arrowDown from \"../assets/icon-arrow-down.svg\";\r\n\r\nfunction HomeTop() {\r\n  const {\r\n    data,\r\n    statuses,\r\n    setStatuses,\r\n    setShowForm,\r\n    useWindowSize,\r\n  } = useGlobalContext();\r\n\r\n  const [showFilter, setShowFilter] = useState(false);\r\n  const [innerWidth, innerHeight] = useWindowSize();\r\n \r\n\r\n  const handleChange = (e) => {\r\n    setStatuses({\r\n      ...statuses,\r\n      [e.target.value]: !statuses[e.target.value],\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"flex-horizontal width home__top\">\r\n      <div>\r\n        <h1>Invoices</h1>\r\n        <p>\r\n          {innerWidth > 768\r\n            ? `There are ${data.length} total invoices`\r\n            : `${data.length} invoices`}\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"flex-horizontal\">\r\n        <div\r\n          className=\"flex-horizontal home__top__filter\"\r\n          onClick={() => {\r\n            setShowFilter(!showFilter);\r\n          }}\r\n        >\r\n          <h3>{innerWidth > 768 ? \"Filter By Status\" : \"Filter\"}</h3>\r\n          <img\r\n            src={arrowDown}\r\n            alt=\"\"\r\n            className={`${!showFilter ? \"arrowDown\" : \"arrowDown turnAround\"}`}\r\n          />\r\n        </div>\r\n        <div className={`${!showFilter ? \"invisible\" : \"filter\"}`}>\r\n          <div className=\"flex-horizontal\">\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"Draft\"\r\n              value=\"draft\"\r\n              onChange={(e) => {\r\n                handleChange(e);\r\n              }}\r\n            />\r\n            <label htmlFor=\"Draft\"> Draft</label>\r\n          </div>\r\n          <div className=\"flex-horizontal\">\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"Pending\"\r\n              value=\"pending\"\r\n              onChange={(e) => {\r\n                handleChange(e);\r\n              }}\r\n            />\r\n            <label htmlFor=\"checkbox\"> Pending</label>\r\n          </div>\r\n\r\n          <div className=\"flex-horizontal\">\r\n            <input\r\n              type=\"checkbox\"\r\n              name=\"Paid\"\r\n              value=\"paid\"\r\n              onChange={(e) => {\r\n                handleChange(e);\r\n              }}\r\n            />\r\n            <label htmlFor=\"Paid\"> Paid</label>\r\n          </div>\r\n        </div>\r\n        <button\r\n          className=\"home__top__filter__btn\"\r\n          onClick={() => {\r\n            setShowForm(true);\r\n          }}\r\n        >\r\n          <img\r\n            src={iconPlus}\r\n            alt=\"\"\r\n            className=\"home__top__filter__btn__iconplus\"\r\n          />\r\n          <h3> {innerWidth > 768 ? \"New Invoice\" : \"New\"}</h3>\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default HomeTop;\r\n","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\InvoiceButtons.js",[],"C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\FormButtons.js",["71","72"],"import React from \"react\";\r\nimport \"../styles/FormButtons.css\";\r\nimport { useGlobalContext } from \"../context\";\r\n\r\nexport const FormButtons = ({ handleSubmit, onSubmit, getValues }) => {\r\n  const {\r\n    data,\r\n    setData,\r\n    edit,\r\n    idx,\r\n    handleCancel,\r\n    setShowForm,\r\n    setEdit,\r\n    info,\r\n    setInfo,\r\n    idGen,\r\n  } = useGlobalContext();\r\n\r\n  const handleDraft = () => {\r\n    let total = 0;\r\n    const draft = { ...info, ...getValues() };\r\n    draft.items.map((el) => {\r\n      el.total = el.quantity * el.price;\r\n      total += parseInt(el.total);\r\n      draft.total = total;\r\n    });\r\n    setInfo({ ...info, ...draft });\r\n    !edit\r\n      ? setData([...data, { ...draft, id: idGen(), status: \"draft\" }])\r\n      : data.splice(idx, 1, draft);\r\n  };\r\n\r\n  return (\r\n    <div className=\"form__buttons\">\r\n      {!edit || info.status == \"draft\" ? (\r\n        <div className=\"submit__buttons\">\r\n          <button\r\n            className=\"btn edit\"\r\n            onClick={() => {\r\n              setEdit(false);\r\n              handleCancel();\r\n            }}\r\n          >\r\n            <h3>Discard</h3>\r\n          </button>\r\n          <div className=\"submit__buttons__section\">\r\n            <button\r\n              className=\"btn edit\"\r\n              onClick={() => {\r\n                setShowForm(false);\r\n                setEdit(false);\r\n                handleDraft();\r\n              }}\r\n            >\r\n              <h3>Save as Draft</h3>\r\n            </button>\r\n\r\n            <button\r\n              className=\"btn markpaid \"\r\n              onClick={() => {\r\n                handleSubmit(onSubmit)();\r\n                setEdit(false);\r\n              }}\r\n            >\r\n              <h3>Save & Send</h3>\r\n            </button>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <div className=\"edit__buttons\">\r\n          <button\r\n            className=\"btn edit\"\r\n            onClick={() => {\r\n              setEdit(false);\r\n              handleCancel();\r\n            }}\r\n          >\r\n            <h3>Cancel</h3>\r\n          </button>\r\n\r\n          <button\r\n            className=\"btn markpaid\"\r\n            onClick={() => {\r\n              handleSubmit(onSubmit)();\r\n            }}\r\n          >\r\n            <h3>Save Changes</h3>\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FormButtons;\r\n","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\Item.js",["73"],"import React, { useState } from \"react\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport garbage from \"../assets/icon-delete.svg\";\r\n\r\nconst Item = ({ register, watch,}) => {\r\n  const { info, setInfo } = useGlobalContext();\r\n  const [item, setItem] = useState([...info.items]);\r\n\r\n  const addItem = () => {\r\n    setItem((prevItem) => [...prevItem, {}]);\r\n  };\r\n\r\n  const removeItem = (index) => {\r\n    setItem((prevItem) => [\r\n      ...prevItem.filter((item, i) => {\r\n        console.log(i !== index);\r\n        return i !== index;\r\n      }),\r\n    ]);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {item.map((el, i) => {\r\n        const fieldName = `items[${i}]`;\r\n        const quantity = watch(`${fieldName}.quantity`);\r\n        const price = watch(`${fieldName}.price`);\r\n        return (\r\n          <div name={fieldName} key={fieldName}>\r\n            <div className=\"items\">\r\n              <div className=\"input item__input__name\">\r\n                <label>\r\n                  Item Name\r\n                  <input\r\n                    // style={{\r\n                    //   border: `${errors?.fieldName?.name}` ? \"1px solid red\" : \"\",\r\n                    // }}\r\n                    type=\"text\"\r\n                    name={`${fieldName}.name`}\r\n                    ref={register({ required: true, maxLength: 80 })}\r\n                  />\r\n                </label>\r\n              </div>\r\n\r\n              <div className=\"items__total\">\r\n                <div className=\"items__input__fields\">\r\n                  <div className=\"qty input\">\r\n                    <label>\r\n                      Item Qty\r\n                      <input\r\n                        type=\"number\"\r\n                        name={`${fieldName}.quantity`}\r\n                        ref={register({ required: true, maxLength: 5 })}\r\n                      />\r\n                    </label>\r\n                  </div>\r\n\r\n                  <div className=\"price\">\r\n                    <label>\r\n                      Item Price\r\n                      <input\r\n                        type=\"number\"\r\n                        name={`${fieldName}.price`}\r\n                        ref={register({ required: true, maxLength: 8 })}\r\n                      />\r\n                    </label>\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <h3>Total</h3>\r\n                  <h3>{quantity * price || \"0.00\"}</h3>\r\n                </div>\r\n                <img\r\n                  className=\"garbage\"\r\n                  src={garbage}\r\n                  alt=\"\"\r\n                  onClick={() => {\r\n                    item.length > 1 && removeItem(i);\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n      <button type=\"button\" onClick={addItem} className=\"add-item btn\">\r\n        <h3>+ Add Item </h3>\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Item;\r\n","C:\\Users\\User\\Desktop\\webdev\\invoice-app\\src\\Components\\Form.js",["74","75"],"import React, { useState, useEffect } from \"react\";\r\nimport ReactDom from \"react-dom\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useGlobalContext } from \"../context\";\r\nimport \"../styles/Form.css\";\r\nimport FormButtons from \"./FormButtons\";\r\nimport Item from \"./Item\";\r\n\r\nexport default function Form() {\r\n  const { info, edit, showForm, handleCancel, onSubmit } = useGlobalContext();\r\n\r\n  const { register, handleSubmit, errors, reset, getValues, watch } = useForm({\r\n    mode: \"onTouched\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    setTimeout(() => {\r\n      reset({ ...info });\r\n    }, 1000);\r\n  }, [info]);\r\n\r\n  if (!showForm) {\r\n    return null;\r\n  }\r\n\r\n  return ReactDom.createPortal(\r\n    <div\r\n      className=\"darken-bg\"\r\n      onClick={() => {\r\n        handleCancel();\r\n      }}\r\n    >\r\n      <div\r\n        className=\"form\"\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n        }}\r\n      >\r\n        <div className=\"form__header\">\r\n          {edit ? (\r\n            <h1>\r\n              Edit <span className=\"hashtag\">#</span>\r\n              {info.id}\r\n            </h1>\r\n          ) : (\r\n            <h1>New Invoice</h1>\r\n          )}\r\n        </div>\r\n        <form onSubmit={handleSubmit(onSubmit)}>\r\n          <h3 className=\"bill\">Bill From</h3>\r\n          <div className=\"sender\">\r\n            <div className=\"input\">\r\n              <label htmlFor=\"senderAddressStreet\">Street Address</label>\r\n              <input\r\n                style={{\r\n                  border: errors.senderAddress?.street ? \"1px solid red\" : \"\",\r\n                }}\r\n                type=\"text\"\r\n                placeholder=\"Chaisubani Street 4\"\r\n                name=\"senderAddress.street\"\r\n                ref={register({\r\n                  required: {\r\n                    value: true,\r\n                    message: \"You must enter your name\",\r\n                  },\r\n                  maxLength: 80,\r\n                })}\r\n              />\r\n              {/* {errors.senderAddress[\"street\"] && (\r\n              <div className=\"error\">{errors.senderAddress.street.message}</div>\r\n            )} */}\r\n            </div>\r\n            <div className=\"sender__horizontal grid__horizontal\">\r\n              <div className=\"input\">\r\n                <label htmlFor=\"senderAddressCity\">City</label>\r\n                <input\r\n                  style={{\r\n                    border: errors.senderAddress?.city ? \"1px solid red\" : \"\",\r\n                  }}\r\n                  type=\"text\"\r\n                  placeholder=\"Tbilisi\"\r\n                  name=\"senderAddress.city\"\r\n                  ref={register({ required: true, maxLength: 80 })}\r\n                />\r\n              </div>\r\n              <div className=\"input\">\r\n                <label htmlFor=\"senderAddressPostCode\">Post Code</label>\r\n                <input\r\n                  style={{\r\n                    border: errors.senderAddress?.postCode\r\n                      ? \"1px solid red\"\r\n                      : \"\",\r\n                  }}\r\n                  type=\"text\"\r\n                  placeholder=\"1212\"\r\n                  name=\"senderAddress.postCode\"\r\n                  ref={register({ required: true, maxLength: 80 })}\r\n                />\r\n              </div>\r\n              <div className=\"input grid__third\">\r\n                <label htmlFor=\"senderAddressCountry\">Country</label>\r\n                <input\r\n                  style={{\r\n                    border: errors.senderAddress?.country\r\n                      ? \"1px solid red\"\r\n                      : \"\",\r\n                  }}\r\n                  type=\"text\"\r\n                  placeholder=\"Georgia\"\r\n                  name=\"senderAddress.country\"\r\n                  ref={register({ required: true, maxLength: 80 })}\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <h3 className=\"bill\">Bill To</h3>\r\n          <div className=\"input\">\r\n            <label htmlFor=\"clientName\">Client's Name</label>\r\n            <input\r\n              style={{ border: errors.clientName ? \"1px solid red\" : \"\" }}\r\n              type=\"text\"\r\n              placeholder=\"John Blaze\"\r\n              name=\"clientName\"\r\n              ref={register({ required: true, maxLength: 80 })}\r\n            />\r\n          </div>\r\n          <div className=\"input\">\r\n            <label htmlFor=\"clientEmail\">Client's Email</label>\r\n            <input\r\n              style={{ border: errors.clientEmail ? \"1px solid red\" : \"\" }}\r\n              type=\"email\"\r\n              placeholder=\"ceo@blaze.com\"\r\n              name=\"clientEmail\"\r\n              ref={register({ required: true, maxLength: 80 })}\r\n            />\r\n          </div>\r\n          <div className=\"input\">\r\n            <label htmlFor=\"clientAddressStreet\">Street Address</label>\r\n            <input\r\n              style={{\r\n                border: errors.clientAddress?.street ? \"1px solid red\" : \"\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"17 W 32nd Street\"\r\n              name=\"clientAddress.street\"\r\n              ref={register({ required: true, maxLength: 80 })}\r\n            />\r\n          </div>\r\n          <div className=\"client__horizontal grid__horizontal\">\r\n            <div className=\"input\">\r\n              <label htmlFor=\"clientAddressCity\">City</label>\r\n              <input\r\n                style={{\r\n                  border: errors.clientAddress?.city ? \"1px solid red\" : \"\",\r\n                }}\r\n                type=\"text\"\r\n                placeholder=\"New York City\"\r\n                name=\"clientAddress.city\"\r\n                ref={register({ required: true, maxLength: 80 })}\r\n              />\r\n            </div>\r\n            <div className=\"input\">\r\n              <label htmlFor=\"clientAddressPostCode\">Post Code</label>\r\n              <input\r\n                style={{\r\n                  border: errors.clientAddress?.postCode ? \"1px solid red\" : \"\",\r\n                }}\r\n                type=\"text\"\r\n                placeholder=\"10001\"\r\n                name=\"clientAddress.postCode\"\r\n                ref={register({ required: true, maxLength: 80 })}\r\n              />\r\n            </div>\r\n            <div className=\"input  grid__third\">\r\n              <label htmlFor=\"clientAddressCountry\">Country</label>\r\n              <input\r\n                style={{\r\n                  border: errors.clientAddress?.country ? \"1px solid red\" : \"\",\r\n                }}\r\n                type=\"text\"\r\n                placeholder=\"United States\"\r\n                name=\"clientAddress.country\"\r\n                ref={register({ required: true, maxLength: 80 })}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"client__date grid__horizontal\">\r\n            <div className=\"input\">\r\n              <label htmlFor=\"createdOn\">Invoice Date</label>\r\n              <input\r\n                style={{\r\n                  border: errors.createdOn ? \"1px solid red\" : \"\",\r\n                }}\r\n                type=\"date\"\r\n                placeholder=\"createdOn\"\r\n                name=\"createdOn\"\r\n                ref={register({ required: true })}\r\n              />\r\n            </div>\r\n            <div className=\"input\">\r\n              <label htmlFor=\"paymentTerms\">Payment Terms</label>\r\n              <select name=\"paymentTerms\" ref={register({ required: true })}>\r\n                <option value=\"1\">Net 1 Day</option>\r\n                <option value=\"7\">Net7 Days</option>\r\n                <option value=\"14\">Net 14 Days</option>\r\n                <option value=\"30\">Net 30 Days</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n          <div className=\"input\">\r\n            <label htmlFor=\"description\">Project Description</label>\r\n            <input\r\n              style={{\r\n                border: errors.description ? \"1px solid red\" : \"\",\r\n              }}\r\n              type=\"text\"\r\n              placeholder=\"Motorcycle Re-Design\"\r\n              name=\"description\"\r\n              ref={register({ required: true, maxLength: 80 })}\r\n            />\r\n          </div>\r\n\r\n          <Item register={register} info={info} watch={watch} />\r\n        </form>\r\n        <FormButtons\r\n          handleSubmit={handleSubmit}\r\n          onSubmit={onSubmit}\r\n          getValues={getValues}\r\n          errors={errors}\r\n        />\r\n      </div>\r\n    </div>,\r\n    document.getElementById(\"portal\")\r\n  );\r\n}\r\n",{"ruleId":"76","severity":1,"message":"77","line":25,"column":6,"nodeType":"78","endLine":25,"endColumn":8,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":33,"column":26,"nodeType":"82","messageId":"83","endLine":33,"endColumn":28},{"ruleId":"76","severity":1,"message":"84","line":29,"column":6,"nodeType":"78","endLine":29,"endColumn":8,"suggestions":"85"},{"ruleId":"86","severity":1,"message":"87","line":59,"column":26,"nodeType":"88","messageId":"89","endLine":59,"endColumn":49,"fix":"90"},{"ruleId":"91","severity":1,"message":"92","line":159,"column":32,"nodeType":"93","messageId":"94","endLine":159,"endColumn":33,"suggestions":"95"},{"ruleId":"76","severity":1,"message":"96","line":66,"column":3,"nodeType":"97","endLine":66,"endColumn":12,"suggestions":"98"},{"ruleId":"80","severity":1,"message":"99","line":80,"column":24,"nodeType":"82","messageId":"100","endLine":80,"endColumn":26},{"ruleId":"101","severity":1,"message":"102","line":9,"column":5,"nodeType":"97","messageId":"103","endLine":9,"endColumn":9},{"ruleId":"101","severity":1,"message":"104","line":16,"column":22,"nodeType":"97","messageId":"103","endLine":16,"endColumn":33},{"ruleId":"80","severity":1,"message":"99","line":22,"column":26,"nodeType":"82","messageId":"100","endLine":22,"endColumn":28},{"ruleId":"105","severity":1,"message":"106","line":35,"column":29,"nodeType":"107","messageId":"108","endLine":35,"endColumn":31},{"ruleId":"101","severity":1,"message":"109","line":6,"column":17,"nodeType":"97","messageId":"103","endLine":6,"endColumn":24},{"ruleId":"101","severity":1,"message":"110","line":1,"column":17,"nodeType":"97","messageId":"103","endLine":1,"endColumn":25},{"ruleId":"76","severity":1,"message":"111","line":20,"column":6,"nodeType":"78","endLine":20,"endColumn":12,"suggestions":"112"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'infoFormat', 'setConfDelete', 'setInfo', and 'setShowForm'. Either include them or remove the dependency array.","ArrayExpression",["113"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'chosenId', 'data', 'setIdx', and 'setInfo'. Either include them or remove the dependency array.",["114"],"no-useless-computed-key","Unnecessarily computed property [\"marginRight\"] found.","Property","unnecessarilyComputedProperty",{"range":"115","text":"116"},"no-useless-escape","Unnecessary escape character: \\$.","TemplateElement","unnecessaryEscape",["117","118"],"React Hook useEffect contains a call to 'setData'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [data] as a second argument to the useEffect Hook.","Identifier",["119"],"Array.prototype.map() expects a return value from arrow function.","expectedInside","no-unused-vars","'data' is assigned a value but never used.","unusedVar","'innerHeight' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setInfo' is assigned a value but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'reset'. Either include it or remove the dependency array.",["120"],{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},[1369,1384],"\"marginRight\"",{"messageId":"125","fix":"126","desc":"127"},{"messageId":"128","fix":"129","desc":"130"},{"desc":"131","fix":"132"},{"desc":"133","fix":"134"},"Update the dependencies array to be: [infoFormat, setConfDelete, setInfo, setShowForm]",{"range":"135","text":"136"},"Update the dependencies array to be: [chosenId, data, setIdx, setInfo]",{"range":"137","text":"138"},"removeEscape",{"range":"139","text":"140"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"141","text":"142"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Add dependencies array: [data]",{"range":"143","text":"144"},"Update the dependencies array to be: [info, reset]",{"range":"145","text":"146"},[602,604],"[infoFormat, setConfDelete, setInfo, setShowForm]",[704,706],"[chosenId, data, setIdx, setInfo]",[5121,5122],"",[5121,5121],"\\",[1788,1788],", [data]",[604,610],"[info, reset]"]